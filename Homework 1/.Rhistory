fit = suppressWarning( fitdistr ( Dataset, dist_name , start=list( shape1=0.5, shape2=0.5 ) ) )
else
next
}
else if (dist_name == "chi-squared") {
print (round(mean(Dataset)))
fit = suppressWarnings( fitdistr( Dataset, dist_name, start=list(df=3) , method="BFGS" ) )
# list(df=round(mean(Dataset)))
}
else {
fit = suppressWarnings( fitdistr( Dataset, dist_name ) )
}
fitted_parameters = fit$estimate
log_likelihood = fit$loglik
parameter_value_string = paste(round(fitted_parameters), collapse=",")
cat(sprintf("%s %s\n", dist_name, parameter_value_string))
cat(sprintf("               log-likelihood = %f\n", log_likelihood))
if (log_likelihood > maximum_likelihood) {
maximum_likelihood = log_likelihood
dataset_distribution = dist_name
dataset_parameters = parameter_value_string
}
}
}
cat("Distribution of Dataset : \n")
cat(sprintf("%s %s\n", dataset_distribution, dataset_parameters))
# output distribution to csv file
csv_output = paste(dataset_distribution, dataset_parameters, sep = ",")
if (dataset_distribution != "t")
csv_output = paste(csv_output, "," , collapse = "", sep = "")
cat(csv_output,file="HW0_output.csv",sep="\n", append=TRUE)
}
not.installed <- function(pkg) !is.element(pkg, installed.packages()[,1])
if (not.installed("MASS"))  install.packages("MASS")  # we need the MASS package
library(MASS)  #  load the MASS package
#  Read in a table (in csv format) from standard input:
Table = data.matrix(read.csv( file("HW0_test.csv"), header=TRUE ))
output_file = "HW0_output.csv"
Distribution = c( "normal", "t", "chi-squared", "lognormal", "exponential", "gamma", "logistic", "beta", "weibull" )
Distribution_can_have_negative_values = c( TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE )
Distribution_function = c( dnorm, dt, dchisq, dlnorm, dexp, dgamma, dlogis, dbeta, dweibull)
if (file.exists(output_file)) {
file.remove(output_file)
}
for (j in 1:ncol(Table)) {
Dataset = Table[,j]
Dataset_is_nonnegative = !any( Dataset < 0 )
Dataset_in_range_0_to_1 = Dataset_is_nonnegative & !any(Dataset < 1)
maximum_likelihood = -Inf
cat(sprintf("\nWorking on Dataset %d:\n", j))
for (i in 1:length(Distribution)) {
dist_name = Distribution[i]
if (Distribution_can_have_negative_values[i] || Dataset_is_nonnegative) {
if (dist_name == "beta") {
if( Dataset_in_range_0_to_1 )
fit = suppressWarning( fitdistr ( Dataset, dist_name , start=list( shape1=0.5, shape2=0.5 ) ) )
else
next
}
else if (dist_name == "chi-squared") {
print (round(mean(Dataset)))
fit = suppressWarnings( fitdistr( Dataset, dist_name, start=list(df=3) , method="BFGS" ) )
# list(df=round(mean(Dataset)))
}
else {
fit = suppressWarnings( fitdistr( Dataset, dist_name ) )
}
fitted_parameters = fit$estimate
log_likelihood = fit$loglik
parameter_value_string = paste(round(fitted_parameters), collapse=",")
cat(sprintf("%s %s\n", dist_name, parameter_value_string))
cat(sprintf("               log-likelihood = %f\n", log_likelihood))
if (log_likelihood > maximum_likelihood) {
maximum_likelihood = log_likelihood
dataset_distribution = dist_name
dataset_parameters = parameter_value_string
}
}
}
cat("Distribution of Dataset : \n")
cat(sprintf("%s %s\n", dataset_distribution, dataset_parameters))
# output distribution to csv file
csv_output = paste(dataset_distribution, dataset_parameters, sep = ",")
if (dataset_distribution != "t")
csv_output = paste(csv_output, "," , collapse = "", sep = "")
cat(csv_output,file=output_file,sep="\n", append=TRUE)
}
cat("Distributions Output : \n", readChar(output_file, 1e5))
not.installed <- function(pkg) !is.element(pkg, installed.packages()[,1])
if (not.installed("MASS"))  install.packages("MASS")  # we need the MASS package
library(MASS)  #  load the MASS package
#  Read in a table (in csv format) from standard input:
Table = data.matrix(read.csv( file("HW0_test.csv"), header=TRUE ))
output_file = "HW0_output.csv"
Distribution = c( "normal", "t", "chi-squared", "lognormal", "exponential", "gamma", "logistic", "beta", "weibull" )
Distribution_can_have_negative_values = c( TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE )
Distribution_function = c( dnorm, dt, dchisq, dlnorm, dexp, dgamma, dlogis, dbeta, dweibull)
if (file.exists(output_file)) {
file.remove(output_file)
}
for (j in 1:ncol(Table)) {
Dataset = Table[,j]
Dataset_is_nonnegative = !any( Dataset < 0 )
Dataset_in_range_0_to_1 = Dataset_is_nonnegative & !any(Dataset < 1)
maximum_likelihood = -Inf
cat(sprintf("\nWorking on Dataset %d:\n", j))
for (i in 1:length(Distribution)) {
dist_name = Distribution[i]
if (Distribution_can_have_negative_values[i] || Dataset_is_nonnegative) {
if (dist_name == "beta") {
if( Dataset_in_range_0_to_1 )
fit = suppressWarning( fitdistr ( Dataset, dist_name , start=list( shape1=0.5, shape2=0.5 ) ) )
else
next
}
else if (dist_name == "chi-squared") {
fit = suppressWarnings( fitdistr( Dataset, dist_name, start=list(df=3) , method="BFGS" ) )
# list(df=round(mean(Dataset)))
}
else {
fit = suppressWarnings( fitdistr( Dataset, dist_name ) )
}
fitted_parameters = fit$estimate
log_likelihood = fit$loglik
parameter_value_string = paste(round(fitted_parameters), collapse=",")
cat(sprintf("%s %s\n", dist_name, parameter_value_string))
cat(sprintf("               log-likelihood = %f\n", log_likelihood))
if (log_likelihood > maximum_likelihood) {
maximum_likelihood = log_likelihood
dataset_distribution = dist_name
dataset_parameters = parameter_value_string
}
}
}
cat("Distribution of Dataset : \n")
cat(sprintf("%s %s\n", dataset_distribution, dataset_parameters))
# output distribution to csv file
csv_output = paste(dataset_distribution, dataset_parameters, sep = ",")
if (dataset_distribution != "t")
csv_output = paste(csv_output, "," , collapse = "", sep = "")
cat(csv_output,file=output_file,sep="\n", append=TRUE)
}
cat("Distributions Output : \n", readChar(output_file, 1e5))
cat("Distributions Output:\n", readChar(output_file, 1e5))
not.installed <- function(pkg) !is.element(pkg, installed.packages()[,1])
if (not.installed("MASS"))  install.packages("MASS")  # we need the MASS package
library(MASS)  #  load the MASS package
#  Read in a table (in csv format) from standard input:
Table = data.matrix(read.csv( file("HW0_test.csv"), header=TRUE ))
output_file = "HW0_output.csv"
Distribution = c( "normal", "t", "chi-squared", "lognormal", "exponential", "gamma", "logistic", "beta", "weibull" )
Distribution_can_have_negative_values = c( TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE )
Distribution_function = c( dnorm, dt, dchisq, dlnorm, dexp, dgamma, dlogis, dbeta, dweibull)
if (file.exists(output_file)) {
file.remove(output_file)
}
for (j in 1:ncol(Table)) {
Dataset = Table[,j]
Dataset_is_nonnegative = !any( Dataset < 0 )
Dataset_in_range_0_to_1 = Dataset_is_nonnegative & !any(Dataset < 1)
maximum_likelihood = -Inf
cat(sprintf("\nWorking on Dataset %d:\n", j))
for (i in 1:length(Distribution)) {
dist_name = Distribution[i]
if (Distribution_can_have_negative_values[i] || Dataset_is_nonnegative) {
if (dist_name == "beta") {
if( Dataset_in_range_0_to_1 )
fit = suppressWarning( fitdistr ( Dataset, dist_name , start=list( shape1=0.5, shape2=0.5 ) ) )
else
next
}
else if (dist_name == "chi-squared") {
fit = suppressWarnings( fitdistr( Dataset, dist_name, start=list(df=3) , method="BFGS" ) )
# list(df=round(mean(Dataset)))
}
else {
fit = suppressWarnings( fitdistr( Dataset, dist_name ) )
}
fitted_parameters = fit$estimate
log_likelihood = fit$loglik
parameter_value_string = paste(round(fitted_parameters), collapse=",")
cat(sprintf("%s %s\n", dist_name, parameter_value_string))
cat(sprintf("               log-likelihood = %f\n", log_likelihood))
if (log_likelihood > maximum_likelihood) {
maximum_likelihood = log_likelihood
dataset_distribution = dist_name
dataset_parameters = parameter_value_string
}
}
}
cat("Distribution of Dataset : \n")
cat(sprintf("%s %s\n", dataset_distribution, dataset_parameters))
# output distribution to csv file
csv_output = paste(dataset_distribution, dataset_parameters, sep = ",")
if (dataset_distribution != "t")
csv_output = paste(csv_output, "," , collapse = "", sep = "")
cat(csv_output,file=output_file,sep="\n", append=TRUE)
}
cat("Distributions Output:\n", readChar(output_file, 1e5))
not.installed <- function(pkg) !is.element(pkg, installed.packages()[,1])
if (not.installed("MASS"))  install.packages("MASS")  # we need the MASS package
library(MASS)  #  load the MASS package
#  Read in a table (in csv format) from standard input:
Table = data.matrix(read.csv( file("HW0_test.csv"), header=TRUE ))
output_file = "HW0_output.csv"
Distribution = c( "normal", "t", "chi-squared", "lognormal", "exponential", "gamma", "logistic", "beta", "weibull" )
Distribution_can_have_negative_values = c( TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE )
Distribution_function = c( dnorm, dt, dchisq, dlnorm, dexp, dgamma, dlogis, dbeta, dweibull)
if (file.exists(output_file)) {
file.remove(output_file)
}
for (j in 1:ncol(Table)) {
Dataset = Table[,j]
Dataset_is_nonnegative = !any( Dataset < 0 )
Dataset_in_range_0_to_1 = Dataset_is_nonnegative & !any(Dataset < 1)
maximum_likelihood = -Inf
cat(sprintf("\nWorking on Dataset %d:\n", j))
for (i in 1:length(Distribution)) {
dist_name = Distribution[i]
if (Distribution_can_have_negative_values[i] || Dataset_is_nonnegative) {
if (dist_name == "beta") {
if( Dataset_in_range_0_to_1 )
fit = suppressWarning( fitdistr ( Dataset, dist_name , start=list( shape1=0.5, shape2=0.5 ) ) )
else
next
}
else if (dist_name == "chi-squared") {
fit = suppressWarnings( fitdistr( Dataset, dist_name, start=list(df=3) , method="BFGS" ) )
# list(df=round(mean(Dataset)))
}
else {
fit = suppressWarnings( fitdistr( Dataset, dist_name ) )
}
fitted_parameters = fit$estimate
log_likelihood = fit$loglik
parameter_value_string = paste(round(fitted_parameters), collapse=",")
cat(sprintf("%s %s\n", dist_name, parameter_value_string))
cat(sprintf("               log-likelihood = %f\n", log_likelihood))
if (log_likelihood > maximum_likelihood) {
maximum_likelihood = log_likelihood
dataset_distribution = dist_name
dataset_parameters = parameter_value_string
}
}
}
cat("Distribution of Dataset : \n")
cat(sprintf("%s %s\n", dataset_distribution, dataset_parameters))
# output distribution to csv file
csv_output = paste(dataset_distribution, dataset_parameters, sep = ",")
if (dataset_distribution != "t")
csv_output = paste(csv_output, "," , collapse = "", sep = "")
cat(csv_output,file=output_file,sep="\n", append=TRUE)
}
output_distribution <- read.csv(file=output_file,head=FALSE,sep=",")
cat("Distributions Output:\n", output_distribution)
print(output_distribution)
not.installed <- function(pkg) !is.element(pkg, installed.packages()[,1])
if (not.installed("MASS"))  install.packages("MASS")  # we need the MASS package
library(MASS)  #  load the MASS package
#  Read in a table (in csv format) from standard input:
Table = data.matrix(read.csv( file("HW0_test.csv"), header=TRUE ))
output_file = "HW0_output.csv"
Distribution = c( "normal", "t", "chi-squared", "lognormal", "exponential", "gamma", "logistic", "beta", "weibull" )
Distribution_can_have_negative_values = c( TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE )
Distribution_function = c( dnorm, dt, dchisq, dlnorm, dexp, dgamma, dlogis, dbeta, dweibull)
if (file.exists(output_file)) {
file.remove(output_file)
}
for (j in 1:ncol(Table)) {
Dataset = Table[,j]
Dataset_is_nonnegative = !any( Dataset < 0 )
Dataset_in_range_0_to_1 = Dataset_is_nonnegative & !any(Dataset < 1)
maximum_likelihood = -Inf
cat(sprintf("\nWorking on Dataset %d:\n", j))
for (i in 1:length(Distribution)) {
dist_name = Distribution[i]
if (Distribution_can_have_negative_values[i] || Dataset_is_nonnegative) {
if (dist_name == "beta") {
if( Dataset_in_range_0_to_1 )
fit = suppressWarning( fitdistr ( Dataset, dist_name , start=list( shape1=0.5, shape2=0.5 ) ) )
else
next
}
else if (dist_name == "chi-squared") {
fit = suppressWarnings( fitdistr( Dataset, dist_name, start=list(df=3) , method="BFGS" ) )
# list(df=round(mean(Dataset)))
}
else {
fit = suppressWarnings( fitdistr( Dataset, dist_name ) )
}
fitted_parameters = fit$estimate
log_likelihood = fit$loglik
parameter_value_string = paste(round(fitted_parameters), collapse=",")
cat(sprintf("%s %s\n", dist_name, parameter_value_string))
cat(sprintf("               log-likelihood = %f\n", log_likelihood))
if (log_likelihood > maximum_likelihood) {
maximum_likelihood = log_likelihood
dataset_distribution = dist_name
dataset_parameters = parameter_value_string
}
}
}
cat("Distribution of Dataset : \n")
cat(sprintf("%s %s\n", dataset_distribution, dataset_parameters))
# output distribution to csv file
csv_output = paste(dataset_distribution, dataset_parameters, sep = ",")
if (dataset_distribution != "t")
csv_output = paste(csv_output, "," , collapse = "", sep = "")
cat(csv_output,file=output_file,sep="\n", append=TRUE)
}
# output distribution to console
output_distribution <- read.csv(file=output_file,head=FALSE,sep=",")
colnames(output_distribution) <- c("Distribution", "Parameter 1", "Parameter 2", "Parameter 3")
cat("Distributions Output:\n")
print(output_distribution)
not.installed <- function(pkg) !is.element(pkg, installed.packages()[,1])
if (not.installed("MASS"))  install.packages("MASS")  # we need the MASS package
library(MASS)  #  load the MASS package
#  Read in a table (in csv format) from standard input:
Table = data.matrix(read.csv( file("HW0_test.csv"), header=TRUE ))
output_file = "HW0_output.csv"
Distribution = c( "normal", "t", "chi-squared", "lognormal", "exponential", "gamma", "logistic", "beta", "weibull" )
Distribution_can_have_negative_values = c( TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE )
Distribution_function = c( dnorm, dt, dchisq, dlnorm, dexp, dgamma, dlogis, dbeta, dweibull)
if (file.exists(output_file)) {
file.remove(output_file)
}
for (j in 1:ncol(Table)) {
Dataset = Table[,j]
Dataset_is_nonnegative = !any( Dataset < 0 )
Dataset_in_range_0_to_1 = Dataset_is_nonnegative & !any(Dataset < 1)
maximum_likelihood = -Inf
cat(sprintf("\nWorking on Dataset %d:\n", j))
for (i in 1:length(Distribution)) {
dist_name = Distribution[i]
if (Distribution_can_have_negative_values[i] || Dataset_is_nonnegative) {
if (dist_name == "beta") {
if( Dataset_in_range_0_to_1 )
fit = suppressWarning( fitdistr ( Dataset, dist_name , start=list( shape1=0.5, shape2=0.5 ) ) )
else
next
}
else if (dist_name == "chi-squared") {
fit = suppressWarnings( fitdistr( Dataset, dist_name, start=list(df=3) , method="BFGS" ) )
# list(df=round(mean(Dataset)))
}
else {
fit = suppressWarnings( fitdistr( Dataset, dist_name ) )
}
fitted_parameters = fit$estimate
log_likelihood = fit$loglik
parameter_value_string = paste(round(fitted_parameters), collapse=",")
cat(sprintf("%s %s\n", dist_name, parameter_value_string))
cat(sprintf("               log-likelihood = %f\n", log_likelihood))
if (log_likelihood > maximum_likelihood) {
maximum_likelihood = log_likelihood
dataset_distribution = dist_name
dataset_parameters = parameter_value_string
}
}
}
cat("Distribution of Dataset : \n")
cat(sprintf("%s %s\n", dataset_distribution, dataset_parameters))
# output distribution to csv file
csv_output = paste(dataset_distribution, dataset_parameters, sep = ",")
if (dataset_distribution != "t")
csv_output = paste(csv_output, "," , collapse = "", sep = "")
write.table(csv_output, file = output_file, sep = "\n", append = TRUE)
}
# output distribution to Console
cat("Distributions Output:\n", readChar(output_file, 1e5))
not.installed <- function(pkg) !is.element(pkg, installed.packages()[,1])
if (not.installed("MASS"))  install.packages("MASS")  # we need the MASS package
library(MASS)  #  load the MASS package
#  Read in a table (in csv format) from standard input:
Table = data.matrix(read.csv( file("HW0_test.csv"), header=TRUE ))
output_file = "HW0_output.csv"
Distribution = c( "normal", "t", "chi-squared", "lognormal", "exponential", "gamma", "logistic", "beta", "weibull" )
Distribution_can_have_negative_values = c( TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE )
Distribution_function = c( dnorm, dt, dchisq, dlnorm, dexp, dgamma, dlogis, dbeta, dweibull)
if (file.exists(output_file)) {
file.remove(output_file)
}
for (j in 1:ncol(Table)) {
Dataset = Table[,j]
Dataset_is_nonnegative = !any( Dataset < 0 )
Dataset_in_range_0_to_1 = Dataset_is_nonnegative & !any(Dataset < 1)
maximum_likelihood = -Inf
cat(sprintf("\nWorking on Dataset %d:\n", j))
for (i in 1:length(Distribution)) {
dist_name = Distribution[i]
if (Distribution_can_have_negative_values[i] || Dataset_is_nonnegative) {
if (dist_name == "beta") {
if( Dataset_in_range_0_to_1 )
fit = suppressWarning( fitdistr ( Dataset, dist_name , start=list( shape1=0.5, shape2=0.5 ) ) )
else
next
}
else if (dist_name == "chi-squared") {
fit = suppressWarnings( fitdistr( Dataset, dist_name, start=list(df=3) , method="BFGS" ) )
# list(df=round(mean(Dataset)))
}
else {
fit = suppressWarnings( fitdistr( Dataset, dist_name ) )
}
fitted_parameters = fit$estimate
log_likelihood = fit$loglik
parameter_value_string = paste(round(fitted_parameters), collapse=",")
cat(sprintf("%s %s\n", dist_name, parameter_value_string))
cat(sprintf("               log-likelihood = %f\n", log_likelihood))
if (log_likelihood > maximum_likelihood) {
maximum_likelihood = log_likelihood
dataset_distribution = dist_name
dataset_parameters = parameter_value_string
}
}
}
cat("Distribution of Dataset : \n")
cat(sprintf("%s %s\n", dataset_distribution, dataset_parameters))
# output distribution to csv file
csv_output = paste(dataset_distribution, dataset_parameters, sep = ",")
if (dataset_distribution != "t")
csv_output = paste(csv_output, "," , collapse = "", sep = "")
cat(csv_output,file = output_file, sep = "\n", append = TRUE)
}
# output distribution to Console
cat("Distributions Output:\n", readChar(output_file, 1e5))
Table = data.matrix(read.csv( file("HW1_demo_input.csv"), header=TRUE ))
head(Table)
setwd("~/Documents/Masters/CS 249/Homework/HW1")
#  Read in a table (in csv format) from standard input:
Table = data.matrix(read.csv( file("HW1_demo_input.csv"), header=TRUE ))
head(Table)
#  Read in a table (in csv format) from standard input:
Table = data.matrix(read.csv( file("HW1_demo_input.csv"), header=TRUE ))
negative_log_likelihood = function(theta){
-log_likelihood(theta)
}
for (j in 1:ncol(Table)) {
Dataset = Table[,j]        #  j-th dataset = the j-th column of the table
initial_theta = c(0, 0)
log_likelihood = function(theta) {
sum( log(dgamma(Dataset, theta[1], rate=theta[2])) )
}
fit = suppressWarnings( optim(initial_theta, negative_log_likelihood) )
alpha = round(fit$par[1])
beta  = round(fit$par[2])
# print integer parameters
cat(sprintf("gamma,%d,%d\n", alpha, beta))
}
#  Read in a table (in csv format) from standard input:
Table = data.matrix(read.csv( file("HW1_demo_input.csv"), header=TRUE ))
negative_log_likelihood = function(theta){
-log_likelihood(theta)
}
for (j in 1:ncol(Table)) {
Dataset = Table[,j]        #  j-th dataset = the j-th column of the table
initial_theta = c(0.1, 0.1)
log_likelihood = function(theta) {
sum( log(dgamma(Dataset, theta[1], rate=theta[2])) )
}
fit = suppressWarnings( optim(initial_theta, negative_log_likelihood) )
alpha = round(fit$par[1])
beta  = round(fit$par[2])
# print integer parameters
cat(sprintf("gamma,%d,%d\n", alpha, beta))
}
#  Read in a table (in csv format) from standard input:
Table = data.matrix(read.csv( file("HW1_demo_input.csv"), header=TRUE ))
output_file = "HW1_output.csv"
negative_log_likelihood = function(theta){
-log_likelihood(theta)
}
log_likelihood = function(theta) {
sum( log(dgamma(Dataset, theta[1], rate=theta[2])) )
}
if (file.exists(output_file)) {
file.remove(output_file)
}
for (j in 1:ncol(Table)) {
Dataset = Table[,j]        #  j-th dataset = the j-th column of the table
initial_theta = c(0.1, 0.1)
fit = suppressWarnings( optim(initial_theta, negative_log_likelihood) )
alpha = round(fit$par[1])
beta  = round(fit$par[2])
# print integer parameters
cat(sprintf("gamma,%d,%d\n", alpha, beta))
cat(csv_output,file = output_file, sep = "\n", append = TRUE)
}
#  Read in a table (in csv format) from standard input:
Table = data.matrix(read.csv( file("HW1_demo_input.csv"), header=TRUE ))
output_file = "HW1_output.csv"
negative_log_likelihood = function(theta){
-log_likelihood(theta)
}
log_likelihood = function(theta) {
sum( log(dgamma(Dataset, theta[1], rate=theta[2])) )
}
if (file.exists(output_file)) {
file.remove(output_file)
}
for (j in 1:ncol(Table)) {
Dataset = Table[,j]        #  j-th dataset = the j-th column of the table
initial_theta = c(0.1, 0.1)
fit = suppressWarnings( optim(initial_theta, negative_log_likelihood) )
alpha = round(fit$par[1])
beta  = round(fit$par[2])
# print integer parameters
csv_output = sprintf("gamma,%d,%d\n", alpha, beta)
cat(csv_output)
cat(csv_output,file = output_file, sep = "\n", append = TRUE)
}
